#include<stdio.h>                                                   //header file

int count=0;                                                        //gloabal variable to check starvation condition
 
struct student 														//structure for storing student information
{
	int id;
	float arrival_time;
	float waiting_time;
	float burst_time;
	float completion_time;
	int index;
};

struct teacher                                                      //structure for storing teacher information
{
	int id;
	float arrival_time;
	float waiting_time;
	float completion_time;
	float burst_time;
	int index;
};

void get_teacher(struct teacher *t, int m)                          //function for inputting teacher's information
{
	int k;
	for(k=0;k<m;k++)
	{
		printf("\nEnter Teacher id             -     ");
		scanf("%d",&t[k].id);
		printf("Arrival Time                 -     "); 
		scanf("%f",&t[k].arrival_time);
		printf("Time taken at the counter    -     ");
		scanf("%f",&t[k].burst_time);
	}
}
void get_student(struct student *s,int n)                           //function for inputting students's information
{
	int k;
	for(k=0;k<n;k++)
	{
		printf("\nEnter Student id             -     ");
		scanf("%d",&s[k].id); 
		printf("Arrival Time                 -     "); 
		scanf("%f",&s[k].arrival_time);
		printf("Time taken at the counter    -     ");
		scanf("%f",&s[k].burst_time);
	}

}

void scheduling(struct teacher *t, int m, struct student *s, int n, int time)      //function for scheduling
{
	int i,j=0,k=0;
	for(i=0;i<m+n;i++)                                                             //for loop to access all visitor
	{
		int flag=0;
		if(m!=0 && k+1<=n && s[k].arrival_time<t[j].arrival_time && time<=s[k].arrival_time && s[k].arrival_time!=t[j].arrival_time)
		{
			flag=1;
		}	
		if(m==0 && n!=0)
		{
			flag=1;
		}
		if(m!=0 && count<=30 && j<m && flag==0) 
		{
			if(t[j].arrival_time>=time)
			{
				t[j].waiting_time=0;
			}
			else
			{
				t[j].waiting_time=time-t[j].arrival_time;
			}
			t[j].completion_time=t[j].waiting_time+t[j].burst_time+t[j].arrival_time;
			count=count+ t[j].burst_time;
			time=t[j].completion_time;
			t[j].index=i;
			j++;
		}
		else if(n!=0 && k<n )
		{
			if(s[k].arrival_time>=time)
			{
				s[k].waiting_time=0;
			}
			else
			{
				s[k].waiting_time=time-s[k].arrival_time;
			}
			s[k].completion_time=s[k].waiting_time+s[k].burst_time+s[k].arrival_time;
			count=0;
			time=s[k].completion_time;
			s[k].index=i;
			k++;
		}
	}
}

void display(struct teacher *t, int m, struct student *s, int n)                    //function to display details of each visitor in order of they access the counter
{
	int i,k=0,j=0;
	printf("\n  Sequence    Id           Visitor      Arrival Time       Waiting Time       Time Taken      Completion Time");
	printf("\n                                                                             at the counter      ");	
	for(i=0;i<m+n;i++)
	{
		if(t[j].index==i && m!=0)
		{
			printf("\n%4d%12d          Teacher %d%14.1f%19.1f%18.1f%18.1f",t[j].index+1,t[j].id,j+1,t[j].arrival_time,t[j].waiting_time,t[j].burst_time,t[j].completion_time);
			j++;
		}
		else if(s[k].index==i && n!=0)
		{
			printf("\n%4d%12d          Student %d%14.1f%19.1f%18.1f%18.1f",s[k].index+1,s[k].id,k+1,s[k].arrival_time,s[k].waiting_time,s[k].burst_time,s[k].completion_time);
			k++;
		}
	}
}
main()                                                               //main function
{
	int m,n=0;
	printf("\nEnter number of teachers in queue - ");
	scanf("%d",&m);
	printf("\nEnter number of students in queue - ");
	scanf("%d",&n);
	
	struct student s[n];                                            //declaring variable of structure student type
	struct teacher t[m];                                            //declaring variable of structure teacher type

	get_teacher(t,m);												//calling function get_teacher

	get_student(s,n);                                               //calling function get_student

	scheduling(t,m,s,n,0);                                          //calling function scheduling

	display(t,m,s,n);                                               //calling function display
	printf("\n\n");
}
